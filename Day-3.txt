                     Bitwise operator

1 EXAMPLE1:

#include <stdio.h>

int main() {
     int result = 10 * 4 / 6 + 3 - 1 % 2;
    
    printf("Result: %d\n", result);
    
    return 0;
}
Output:8.66

2  EXAMPLE2:

#include <stdio.h>

int main() {
    int result = (7 + 2) & (4 + 3) & (9);
    
    printf("Result: %d\n", result);
    
    return 0;
}
Output:1

3 EXAMPLE3:

Using negation(~):

#include <stdio.h>
int main() {
    int result = ~(9+4)&(6);
  printf("Result: %d\n", result);
return 0;}
6|3&9+6
To evaluate the expression "6 | 3 & 9 + 6," you need to follow the order of operations (PEMDAS/BODMAS):
1. First, calculate the addition: 9 + 6 = 15.
Now the expression becomes "6 | 3 & 15."
2. Next, calculate the bitwise AND operation: 3 & 15.
To calculate this, convert 3 and 15 to binary:
* 3 in binary is 0011.
* 15 in binary is 1111.
Perform the bitwise AND operation:
   0011
& 1111
--------
   0011
So, 3 & 15 equals 3.
Now, the expression is "6 | 3."
3. Finally, calculate the bitwise OR operation: 6 | 3.
To calculate this, convert 6 and 3 to binary:
* 6 in binary is 0110.
* 3 in binary is 0011.
Perform the bitwise OR operation:
   0110
| 0011
--------
   0111
So, 6 | 3 equals 7 answer=7.

*So, the negation or OR operator should be calculate only one of the operator.

Bit manipulation tricks:

XOR ^

Even 1’s: 0
Odd 1’s: 1

Xor of number itself is 0
Xor of number with 0 is number itself
RIGHT SHIFT:
5>>1
5/2 = 2
LEFT SHIFT:
Int 32 bits
 5 – 0101
5<<2
5*power(2,2) ans 20
10<<3
10*power(2,3)=80
9<<4
9*power(2,4)=144
Power(2,31)

*after creating an array find out the smallest missing positive integer.

*in the given array every no of occurs once

def find_single(arr):
    result = arr[0]
    for i in range(0,n):
        result = result ^ arr[i]
        return result
arr = [2,3,4,5,4,3,2,5,88]
print(find_single(arr,len(arr)))

*For the given number n check kth bit is set or not?

*n print the xor of all number

*find out the all xor for all the given numbers for the given range.

*the fastest way using bitwise

N=13
If(n&1==0):
Print(“even”)
Else:
Print(“odd”)

N=int(input(“enter the num”))
N1=0
N2=1
If(n<0):
Print(“not possible”)
Else:
For I in range(0,n-1):
N3=n1+n2
N1=n2
N2=n3
Print(n2)

